import { StandardButton, Button, VerticalBox, LineEdit, Switch, GroupBox, ProgressIndicator, TextEdit, StyleMetrics, Palette, ScrollView } from "std-widgets.slint";
import { ProfileTile, ProfileData } from "profile-images.slint";
import { ProfileState } from "profile-state.slint";
import { GridView } from "grid_view.slint";
import { EditWindow, SearchResults } from "profile-edit.slint";

export component AppWindow inherits Window {
    in-out property <float> progress: 0.5;
    in-out property <string> footer: "";
    in-out property <string> archive_path: "";
    in-out property <string> game_path: "";
    in-out property <bool> overwrite: true;
    in-out property <bool> direct: false;
    in-out property <bool> show_about_window: false;
    in-out property <bool> symlink: true;
    in-out property <bool> experimental: false;

    in-out property <[ProfileData]> profiles: [];
    in-out property <[SearchResults]> SearchResults: [];

    private property <int> tab_index: 0;

    in-out property <image> selected_cover_image;
    private property <string> selected_title;
    private property <string> selected_year;
    private property <string> selected_path_to_profile;
    private property <string> selected_temp_path;
    private property <string> selected_name;

    private property <length> dynamic_font_size: min(self.width / 25, self.height / 25);

    callback request_archive_path();
    callback request_game_path();
    callback mod();
    callback restore(string);
    callback reload_profiles();
    callback update_profile(string, string, string);
    callback update_profile_image(string, string);
    callback download_profile_image(string, string);

    title: "Oxide Manager";
    min-height: 750px;
    min-width: 1100px;

    /*MenuBar {
        Menu {
            title: @tr("Options");
            MenuItem {
                title: @tr("Enable experimental and legacy options");
                activated => {
                    root.experimental = !root.experimental;
                }
            }
        }

        Menu {
            title: @tr("Help");
            MenuItem {
                title: @tr("About");

                activated => {
                    about_popup.show();
                }
            }
        }
    }*/

    VerticalLayout {
        spacing: StyleMetrics.layout-spacing;
        padding: 50px;

        HorizontalLayout {
            spacing: StyleMetrics.layout-spacing;
            height: 40px;
            modder := Button {
                text: "Game modder";
                checkable: true;
                checked: tab_index == 0;
                clicked => {
                    tab_index = 0;
                    manager.checked = false;
                }
            }

            manager := Button {
                text: "Game manager";
                checkable: true;
                checked: tab_index == 1;
                clicked => {
                    tab_index = 1;
                    modder.checked = false;
                    root.reload_profiles();
                }
            }
        }

        if (tab_index == 0): VerticalLayout {
            // FIST TAB -------------------------------------------------------------------
            spacing: StyleMetrics.layout-spacing * 2;
            VerticalLayout {
                spacing: StyleMetrics.layout-spacing * 2;
                Text {
                    text: "Path to directory containing compressed files ( RAR - ZIP - 7z )";
                    horizontal-alignment: center;
                    vertical-alignment: bottom;
                }

                HorizontalLayout {
                    spacing: StyleMetrics.layout-spacing;
                    LineEdit {
                        text: root.archive_path;
                        edited(text) => {
                            root.archive_path = text;
                        }
                    }

                    Button {
                        width: 200px;
                        text: "Open directory";
                        clicked => {
                            root.request_archive_path();
                        }
                    }
                }
            }

            VerticalLayout {
                spacing: StyleMetrics.layout-spacing * 2;
                Text {
                    text: "Path to game directory";
                    horizontal-alignment: center;
                    vertical-alignment: bottom;
                }

                HorizontalLayout {
                    spacing: StyleMetrics.layout-spacing;
                    LineEdit {
                        text: root.game_path;
                        edited(text) => {
                            root.game_path = text;
                        }
                    }

                    Button {
                        width: 200px;
                        text: "Open game location";
                        clicked => {
                            root.request_game_path();
                        }
                    }
                }
            }

            VerticalLayout {
                VerticalLayout {
                    HorizontalLayout {
                        alignment: center;
                        spacing: 25px;
                        Switch {
                            text: "Overwrite existing files";
                            checked: root.overwrite;
                            toggled() => {
                                root.overwrite = !root.overwrite;
                            }
                        }
                    }

                    Text {
                        horizontal-alignment: center;
                        text: "(Backups not yet implemented, but not supported when extracting directly to game directory)";
                    }
                }

                if (root.experimental): HorizontalLayout {
                    alignment: center;
                    VerticalLayout {
                        spacing: 10px;
                        Text {
                            text: "Experimental features";
                            horizontal-alignment: center;
                        }

                        HorizontalLayout {
                            spacing: 10px;
                            Switch {
                                text: "Copy instead of symlink";
                                checked: !root.symlink;
                                toggled() => {
                                    root.symlink = !root.symlink;
                                }
                            }

                            Switch {
                                text: "Extract directly (Faster - Less disk usage - Can't create backup)";
                                checked: root.direct;
                                toggled() => {
                                    root.direct = !root.direct;
                                }
                            }
                        }
                    }
                }

                Button {
                    clicked => {
                        root.mod();
                    }
                }

                Text {
                    text: root.footer;
                    horizontal-alignment: center;
                }
            }

            ProgressIndicator {
                visible: false;
                height: 10px;
                progress: root.progress;
                animate progress {
                    duration: 100ms;
                    easing: ease-in-out;
                }
            }
        }
        // END OF FIRST TAB -------------------------------------------------
        if(tab_index == 1): view := GridView {
            // SECOND TAB -------------------------------------------------------------------
            viewport-height: Math.round(profiles.length / self.columns) * view.preferredCellHeight * 1.5px;
            viewport-width: self.width;

            for profile[index] in root.profiles: ProfileTile {
                width: view.expectedWidth * 1px;
                height: view.preferredCellHeight * 1px;
                x: (Math.mod(index, view.columns)) * self.width;
                y: Math.floor(index / view.columns) * self.height;
                cover-image: profile.cover_image;
                title: profile.title;
                year: profile.year;
                path_to_profile: profile.path_to_profile;
                temp_path: profile.temp_path;

                open_game(temp_path) => {
                    root.selected_cover_image = ProfileState.cover_image;
                    root.selected_title = ProfileState.title;
                    root.selected_year = ProfileState.year;
                    root.selected_path_to_profile = ProfileState.path_to_profile;
                    root.selected_temp_path = temp_path;
                    root.tab_index = 2;
                }
            }
        }
        // END OF SECOND TAB -------------------------------------------------
        if (tab_index == 2): VerticalLayout {
          // ProfileTab
          VerticalLayout {
                spacing: StyleMetrics.layout-spacing;
                padding: StyleMetrics.layout-padding;

                HorizontalLayout {
                    spacing: StyleMetrics.layout-spacing;
                    VerticalLayout {
                        alignment: start;
                        spacing: StyleMetrics.layout-spacing;
                        width: 35%;

                        Image {
                            source: root.selected_cover_image;
                            horizontal-alignment: center;
                            image-fit: contain;
                        }
                    }

                    VerticalLayout {
                        alignment: center;
                        spacing: StyleMetrics.layout-spacing;
                        Text {
                            text: root.selected_title;
                            font-size: 72px;
                            color: Palette.selection-background;
                        }

                        Text {
                            text: root.selected_year;
                        }

                        Text {
                            text: "Profile path: " + root.selected_path_to_profile;
                        }

                        Text {
                            text: "Temp path: " + root.selected_temp_path;
                        }
                    }
                }

                HorizontalLayout {
                    spacing: StyleMetrics.layout-spacing;
                    Button {
                        text: "Restore game";
                        clicked => {
                            root.restore(selected_title);
                        }
                    }

                    Button {
                        text: "Edit profile";
                        clicked => {
                            edit_popup.visible = true;
                            edit_popup.opacity = 1;
                        }
                    }

                    Button {
                        text: "Back";
                        clicked => {
                            root.tab_index = 1;
                        }
                    }
                }
            }
        }
    }

    edit_popup := EditWindow {
        visible: false;
        opacity: 0;
        width: root.width;
        height: root.height;
        background: #00000090;
        border-color: lightgray;
        animate opacity {
            duration: 100ms;
            easing: ease-in;
        }
        SearchSteamResults: root.SearchResults;

        update(temp_path, path_profile) => {
            update_profile(root.selected_title, temp_path, path_profile);
        }

        update_steam(search_steam) => {
            update_profile_image(root.selected_title, search_steam);
        }

        download(search_steam) => {
            download_profile_image(root.selected_title, search_steam);
        }
    }

    about_popup := PopupWindow {

        close-on-click: false;

        Rectangle {
            background: root.background;
            border-color: lightgray;
            border-width: 1px;

            VerticalLayout {
                padding: 16px;
                VerticalLayout {
                    Text {
                        text: "Oxide Mod Manager";
                    }

                    Text {
                        text: "Version 0.4.1";
                    }

                    Text {
                        text: "Inverse Software";
                    }

                    Text {
                        text: "Contact at: @pezfisk on discord";
                    }
                }

                StandardButton {
                    kind: ok;
                    clicked => {
                        about_popup.close();
                    }
                }
            }
        }
    }
}
